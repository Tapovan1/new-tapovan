generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id          String   @id @default(cuid())
  username    String   @unique
  password    String
  name        String
  email       String   @unique
  role        TeacherRole @default(TEACHER)
  status      Status   @default(ACTIVE)
  
  assignments TeacherAssignment[]
  tests       Test[]
  attendance  Attendance[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Student {
  id          String   @id @default(cuid())
  grNo        String   @unique
  enrollmentNo String
  rollNo      Int
  name        String

  
  standard String  // "KG1", "1", "2", etc.
  class String   // "Dhruv", "Nachiketa"
  status      Status   @default(ACTIVE)
  
  marks       Mark[]
  attendance  AttendanceRecord[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([rollNo, standard, class])
}

model Test {
  id          String   @id @default(cuid())
  name        String
  subject     String   
  teacherId   String
   
  standard String  
  class   String   
  date        DateTime
  maxMarks    Int
  examType    String   // "Unit Test", "Term Exam", etc.
  status      TestStatus @default(PENDING)
  
  teacher     Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  marks       Mark[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mark {
  id          String @id @default(cuid())
  studentId   String
  testId      String
  subject     String   
  marks       Float
  grade       String?
  
  student     Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  test        Test    @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([studentId, testId])
}

model Attendance {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  standard  String     
 
  class String   
  teacherId String
  
  teacher   Teacher            @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  records   AttendanceRecord[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([date, standard, class])
}

model AttendanceRecord {
  id           String @id @default(cuid())
  attendanceId String
  studentId    String
  isPresent    Boolean
  
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([attendanceId, studentId])
}

// Single table for all teacher assignments
model TeacherAssignment {
  id             String @id @default(cuid())
  teacherId      String
  standardNo     String      // 0=KG1, 1=KG2, 2=Std1, etc.
  standardName   String   // "KG1", "1", "2", etc.
  className      String   // "Dhruv", "Nachiketa"
  subject        String   // "Mathematics", "Science", etc.
  
  
  teacher        Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([teacherId, standardNo, className, subject])
}

model Holiday {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  name        String
  

  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([date])
}

enum TeacherRole {
  ADMIN
  TEACHER
  ATEACHER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TestStatus {
  PENDING
  COMPLETED
 
 
}
