generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id          String              @id @default(cuid())
  username    String              @unique
  password    String
  name        String
  email       String              @unique
  role        TeacherRole         @default(TEACHER)
  status      Status              @default(ACTIVE)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
 
  assignments TeacherAssignment[]
  tests       Test[]

  @@index([status])
  @@index([role])
  @@index([createdAt])
}

model Student {
  id           String             @id @default(cuid())
  rollNo       Int
  name         String
  status       Status             @default(ACTIVE)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  class        String
  standard     String
  enrollmentNo String
  grNo         String             @unique
  attendance   AttendanceRecord[]
  marks        Mark[]

  @@unique([rollNo, standard, class])
  @@index([class, standard])
  @@index([status])
  @@index([standard, class, status])
  @@index([createdAt])
}

model Test {
  id        String     @id @default(cuid())
  name      String
  teacherId String
  date      DateTime   @db.Date
  maxMarks  Int
  status    TestStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  subject   String
  class     String
  standard  String
  examType  String
  marks     Mark[]
  teacher   Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([date])
  @@index([class, standard])
  @@index([status])
  @@index([teacherId, status])
  @@index([class, standard, date])
  @@index([subject, class, standard])
}

model Mark {
  id        String   @id @default(cuid())
  studentId String
  testId    String
  marks     Float
  grade     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subject   String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([studentId, testId])
  @@index([studentId])
  @@index([testId])
  @@index([subject])
  @@index([marks])
  @@index([studentId, subject])
  @@index([testId, marks])
}

model Attendance {
  id        String             @id @default(cuid())
  date      DateTime           @db.Date
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  class     String
  standard  String
  records   AttendanceRecord[]

  @@unique([date, standard, class])
  @@index([date])
  @@index([class, standard])
  @@index([date, class, standard])
}

model AttendanceRecord {
  id           String     @id @default(cuid())
  attendanceId String
  studentId    String
  isPresent    Boolean
  reason       String?    @default("")
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([attendanceId, studentId])
  @@index([attendanceId])
  @@index([studentId])
  @@index([isPresent])
  @@index([studentId, isPresent])
}

model TeacherAssignment {
  id           String   @id @default(cuid())
  teacherId    String
  standardNo   String
  standardName String
  className    String
  subject      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  teacher      Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, standardNo, className, subject])
  @@index([teacherId])
  @@index([standardNo, className])
  @@index([subject])
  @@index([teacherId, standardNo, className])
}

model Holiday {
  id        String   @id @default(cuid())
  date      DateTime @unique @db.Date
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
}

enum TeacherRole {
  ADMIN
  TEACHER
  ATEACHER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TestStatus {
  PENDING
  COMPLETED
}
